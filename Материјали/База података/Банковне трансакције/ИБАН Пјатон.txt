#import numpy as np
#import pandas as pd
#branch = pd.read_csv('C:/proba/mean-course/backend/server-python/env/files/random-branches.csv', delimiter = ',').to_numpy()
#randomBranch = branch[np.random.randint(len(branch))]
#a = str(randomBranch)
#a = a[2:len(a)-2]

#num = "+3816" + str(np.random.randint(0,9)) + str(np.random.randint(1000,9999)) + str(np.random.randint(100,9999))
#print(num)

#06x-xxxx-xxxx

#address = pd.read_csv('C:/proba/mean-course/backend/server-python/env/files/addresses.csv', delimiter = ',').to_numpy()
#address = address[np.random.randint(len(address))]
#add = str(address)
#add = add[2:len(add)-2]
#print(add)

import string

def is_iban(unchecked_iban):

  LETTERS = {ord(d): str(i) for i, d in enumerate(string.digits + string.ascii_uppercase)}


  def _number_iban(iban):
      return (iban[4:] + iban[:4]).translate(LETTERS)


  def generate_iban_check_digits(iban):
      number_iban = _number_iban(iban[:2] + '00' + iban[4:])
      return '{:0>2}'.format(98 - (int(number_iban) % 97))


  def valid_iban(iban):
      return int(_number_iban(iban)) % 97 == 1

  return generate_iban_check_digits(unchecked_iban) == unchecked_iban[2:4] and valid_iban(unchecked_iban)


  german_blz = ['13061088', '37040044', '12030900', '50110300', '26580070', '10220600', '51010800', '51040038', '60069315', '87050000', '66050101', '52360059', '60480008', '76220073', '10050020', '35080070', '36070024', '65461878', '65341204', '60069927', '45451060', '22140028', '42860003', '46080010', '46650005', '63020086', '50210144', '55190064', '69051725', '54070024', '37062124', '28030300', '52065220', '67230000', '47840065', '74062786', '70169474', '70220200', '28062740', '47250101', '72150000', '78020070', '73369871',]

while True:
    iban = "DE{check}{blz}{ran}".format(check=random.randint(11,99), blz=random.choice(german_blz), ran=random.randint(1111111111,9999999999))
    if is_iban(iban):
        print(iban)
        break

def generate_valid_iban():
    import random, string

    def is_iban(unchecked_iban):

        LETTERS = {ord(d): str(i) for i, d in enumerate(string.digits + string.ascii_uppercase)}

        def _number_iban(iban):
            return (iban[4:] + iban[:4]).translate(LETTERS)

        def generate_iban_check_digits(iban):
            number_iban = _number_iban(iban[:2] + '00' + iban[4:])
            return '{:0>2}'.format(98 - (int(number_iban) % 97))

        def valid_iban(iban):
            return int(_number_iban(iban)) % 97 == 1

        return generate_iban_check_digits(unchecked_iban) == unchecked_iban[2:4] and valid_iban(unchecked_iban)

    def bank_ck(ktn):

        ktn = list(map(lambda x: int(x), ktn))[::-1]
        generator = [2, 3, 4, 5, 6, 7, 8, 9, 3]
        rest = sum(map(lambda x: x[0] * x[1], zip(generator, ktn))) % 11
        if rest == 1:
            return 0
        if rest == 0:
            return 0
        return 11 - rest


    while True:
        blz = "13050000"
        ktnr = str(random.randint(111111111, 999999999))
        ktnr = "{}{}".format(ktnr, bank_ck(ktnr))
        iban = "DE{check}{blz}{ran}".format(check=random.randint(11, 99), blz=blz, ran=ktnr)
        if is_iban(iban):
            print(iban)
            break
    return iban